/**
 */
package FileTransferPackage.provider;

import FileTransferPackage.util.FileTransferPackageAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FileTransferPackageItemProviderAdapterFactory extends FileTransferPackageAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FileTransferPackageItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.Path} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathItemProvider pathItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.Path}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathAdapter() {
		if (pathItemProvider == null) {
			pathItemProvider = new PathItemProvider(this);
		}

		return pathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.Selection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectionItemProvider selectionItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.Selection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectionAdapter() {
		if (selectionItemProvider == null) {
			selectionItemProvider = new SelectionItemProvider(this);
		}

		return selectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.Copy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CopyItemProvider copyItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.Copy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCopyAdapter() {
		if (copyItemProvider == null) {
			copyItemProvider = new CopyItemProvider(this);
		}

		return copyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.Move} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveItemProvider moveItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.Move}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveAdapter() {
		if (moveItemProvider == null) {
			moveItemProvider = new MoveItemProvider(this);
		}

		return moveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.Delete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteItemProvider deleteItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.Delete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteAdapter() {
		if (deleteItemProvider == null) {
			deleteItemProvider = new DeleteItemProvider(this);
		}

		return deleteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.ConcreteStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConcreteStepItemProvider concreteStepItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.ConcreteStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConcreteStepAdapter() {
		if (concreteStepItemProvider == null) {
			concreteStepItemProvider = new ConcreteStepItemProvider(this);
		}

		return concreteStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.PathVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathVariableItemProvider pathVariableItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.PathVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathVariableAdapter() {
		if (pathVariableItemProvider == null) {
			pathVariableItemProvider = new PathVariableItemProvider(this);
		}

		return pathVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.OnName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OnNameItemProvider onNameItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.OnName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOnNameAdapter() {
		if (onNameItemProvider == null) {
			onNameItemProvider = new OnNameItemProvider(this);
		}

		return onNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.OnExtension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OnExtensionItemProvider onExtensionItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.OnExtension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOnExtensionAdapter() {
		if (onExtensionItemProvider == null) {
			onExtensionItemProvider = new OnExtensionItemProvider(this);
		}

		return onExtensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.OnTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OnTimeItemProvider onTimeItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.OnTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOnTimeAdapter() {
		if (onTimeItemProvider == null) {
			onTimeItemProvider = new OnTimeItemProvider(this);
		}

		return onTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.OnAttributes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OnAttributesItemProvider onAttributesItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.OnAttributes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOnAttributesAdapter() {
		if (onAttributesItemProvider == null) {
			onAttributesItemProvider = new OnAttributesItemProvider(this);
		}

		return onAttributesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.OnTags} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OnTagsItemProvider onTagsItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.OnTags}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOnTagsAdapter() {
		if (onTagsItemProvider == null) {
			onTagsItemProvider = new OnTagsItemProvider(this);
		}

		return onTagsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.OnSize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OnSizeItemProvider onSizeItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.OnSize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOnSizeAdapter() {
		if (onSizeItemProvider == null) {
			onSizeItemProvider = new OnSizeItemProvider(this);
		}

		return onSizeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.FilterContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterContainerItemProvider filterContainerItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.FilterContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterContainerAdapter() {
		if (filterContainerItemProvider == null) {
			filterContainerItemProvider = new FilterContainerItemProvider(this);
		}

		return filterContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.SelectionVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectionVariableItemProvider selectionVariableItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.SelectionVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectionVariableAdapter() {
		if (selectionVariableItemProvider == null) {
			selectionVariableItemProvider = new SelectionVariableItemProvider(this);
		}

		return selectionVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.VariableStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableStepItemProvider variableStepItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.VariableStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableStepAdapter() {
		if (variableStepItemProvider == null) {
			variableStepItemProvider = new VariableStepItemProvider(this);
		}

		return variableStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.IsEmpty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsEmptyItemProvider isEmptyItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.IsEmpty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsEmptyAdapter() {
		if (isEmptyItemProvider == null) {
			isEmptyItemProvider = new IsEmptyItemProvider(this);
		}

		return isEmptyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.OnType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OnTypeItemProvider onTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.OnType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOnTypeAdapter() {
		if (onTypeItemProvider == null) {
			onTypeItemProvider = new OnTypeItemProvider(this);
		}

		return onTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FileTransferPackage.ParametrizedStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParametrizedStepItemProvider parametrizedStepItemProvider;

	/**
	 * This creates an adapter for a {@link FileTransferPackage.ParametrizedStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParametrizedStepAdapter() {
		if (parametrizedStepItemProvider == null) {
			parametrizedStepItemProvider = new ParametrizedStepItemProvider(this);
		}

		return parametrizedStepItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (pathItemProvider != null) pathItemProvider.dispose();
		if (selectionItemProvider != null) selectionItemProvider.dispose();
		if (copyItemProvider != null) copyItemProvider.dispose();
		if (moveItemProvider != null) moveItemProvider.dispose();
		if (deleteItemProvider != null) deleteItemProvider.dispose();
		if (concreteStepItemProvider != null) concreteStepItemProvider.dispose();
		if (pathVariableItemProvider != null) pathVariableItemProvider.dispose();
		if (onNameItemProvider != null) onNameItemProvider.dispose();
		if (onExtensionItemProvider != null) onExtensionItemProvider.dispose();
		if (onTimeItemProvider != null) onTimeItemProvider.dispose();
		if (onAttributesItemProvider != null) onAttributesItemProvider.dispose();
		if (onTagsItemProvider != null) onTagsItemProvider.dispose();
		if (onSizeItemProvider != null) onSizeItemProvider.dispose();
		if (filterContainerItemProvider != null) filterContainerItemProvider.dispose();
		if (selectionVariableItemProvider != null) selectionVariableItemProvider.dispose();
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (variableStepItemProvider != null) variableStepItemProvider.dispose();
		if (isEmptyItemProvider != null) isEmptyItemProvider.dispose();
		if (onTypeItemProvider != null) onTypeItemProvider.dispose();
		if (parametrizedStepItemProvider != null) parametrizedStepItemProvider.dispose();
	}

}
