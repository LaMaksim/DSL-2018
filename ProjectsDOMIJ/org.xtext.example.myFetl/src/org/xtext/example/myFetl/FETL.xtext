// automatically generated by Xtext
grammar org.xtext.example.myFetl.FETL with org.eclipse.xtext.common.Terminals

import "https://lamaksim.com" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
		executions+=Execution ( ";" executions+=Execution)*
	;

Execution returns Execution:
	Selection | Copy | Move | Delete | PathVariable;


PathVariable returns PathVariable:
	name=EString
	'=' value=Path
	;
	
Path returns Path:
	steps+=GenericStep ( "/" steps+=GenericStep)* 
	;

GenericStep returns GenericStep:
	ConcreteStep | VariableStep | ParametrizedStep;



ConcreteStep returns ConcreteStep:
	value=EString (absolute?=':')?
	;

VariableStep returns VariableStep:
	'?' value=[PathVariable|EString]
	;

ParametrizedStep returns ParametrizedStep:
	{ParametrizedStep}
	'{$'
	name=EString
	'}';


Selection returns Selection:
	'select'
	name=EString
	'from' from=Path
	('where' where=FilterComponent )?	
	;
	

Copy returns Copy:
	'copy'
		'from' source=[Selection|EString]
		'to' destination=Path
		('strategy:' strategy=Strategies)?
	;

Move returns Move:
	'move'
		'from' source=[Selection|EString]
		'to' destination=Path
		('strategy:' strategy=Strategies)?
	;

Delete returns Delete:
	'delete'
		'from' source=[Selection|EString]
	;


FilterContainer returns FilterContainer:
	'(' links+=Link ( links+=Link)* ')' 
	;


Link returns Link:
	(
		and?='and'
		|
		or?='or'
	)?
	element=FilterComponent
	;


//FilterContainer returns FilterContainer:
//	compositionType=CompositionType
//	'(' segments+=FilterComponent ( "," segments+=FilterComponent)* ')' 
//	;


FilterComponent returns FilterComponent:
	OnName | OnExtension | OnTime | OnAttributes | OnTags | OnSize | FilterContainer | IsEmpty | OnType;



OnAttributes returns OnAttributes:
	'attribute'
	name=EString
	(
		(inverse?='not')? 'exist'
		| 
		'is' (inverse?='not')? value=EString
	)
	;

OnTags returns OnTags:
	'in [' (tags+=EString ( "," tags+=EString)*)? ']'
	(
		quantificator=Quantificators
		|
		treshold=EInt 'are'	
	) 
	(inverse?='not')?
	'in tags' 
	(only?='and no more tags')?	
	;
/*OnTags returns OnTags:
	{OnTags}
	(inverse?='inverse')?
	(only?='only')?
	'OnTags'
	'{'
		('tags' '{' tags+=EString ( "," tags+=EString)* '}' )?
		('treshold' treshold=EInt)?
		('quantificator' quantificator=Quantificators)?
	'}'; */
OnTime returns OnTime:
	timeOf=TimeType
	'before'  
	operator=Operator
	treshold=EInt
	unit=TimeUnit
	;
	
OnSize returns OnSize:
	'size of file'
	(inverse?='not')?
	operator=Operator
	treshold=EInt
	unit=MemoryUnit
	;

OnName returns OnName:
	{OnName}
	'name is' (inverse?='not')?  name=EString
	;

OnExtension returns OnExtension:
	{OnExtension}
	'extension is' (inverse?='not')?
	'in [' (extensions+=EString ( "," extensions+=EString)* )? ']'	
	;

IsEmpty returns IsEmpty:
	{IsEmpty}
	'is' (inverse?='not')? 'empty' 
	;
	
OnType returns OnType:
	'file'
	'is' (inverse?='not')? type=FileType
	;


enum Strategies returns Strategies:
				forced = 'forced' | append = 'append' | carefully = 'carefully';


enum Operator returns Operator:
				equal = '==' | less = '<' | more = '>' | less_equal = '<=' | more_equal = '>=';


enum TimeUnit returns TimeUnit:
				mins = 'mins' | hours = 'hours' | days = 'days' | weeks = 'weeks' | months = 'months' | years = 'years';

enum TimeType returns TimeType:
				modified = 'modified' | created = 'created';

enum Quantificators returns Quantificators:
				any = 'any are' | all = 'all are';

enum MemoryUnit returns MemoryUnit:
				KB = 'KB' | MB = 'MB' | GB = 'GB' | TB = 'TB';


enum FileType returns FileType:
				Document = 'Document' | Directory = 'Directory';

EInt returns ecore::EInt:
	'-'? INT;
		
EBoolean returns ecore::EBoolean:
	'true' | 'false';

EString returns ecore::EString:
	STRING | ID;