/*
* generated by Xtext
*/
package org.xtext.example.myFetl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FETLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExecutionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExecutionsExecutionParserRuleCall_1_0 = (RuleCall)cExecutionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExecutionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExecutionsExecutionParserRuleCall_2_1_0 = (RuleCall)cExecutionsAssignment_2_1.eContents().get(0);
		
		//Model:
		//	{Model} executions+=Execution (";" executions+=Execution)*;
		public ParserRule getRule() { return rule; }

		//{Model} executions+=Execution (";" executions+=Execution)*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//executions+=Execution
		public Assignment getExecutionsAssignment_1() { return cExecutionsAssignment_1; }

		//Execution
		public RuleCall getExecutionsExecutionParserRuleCall_1_0() { return cExecutionsExecutionParserRuleCall_1_0; }

		//(";" executions+=Execution)*
		public Group getGroup_2() { return cGroup_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//executions+=Execution
		public Assignment getExecutionsAssignment_2_1() { return cExecutionsAssignment_2_1; }

		//Execution
		public RuleCall getExecutionsExecutionParserRuleCall_2_1_0() { return cExecutionsExecutionParserRuleCall_2_1_0; }
	}

	public class ExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Execution");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCopyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMoveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDeleteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPathVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Execution:
		//	Selection | Copy | Move | Delete | PathVariable;
		public ParserRule getRule() { return rule; }

		//Selection | Copy | Move | Delete | PathVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//Selection
		public RuleCall getSelectionParserRuleCall_0() { return cSelectionParserRuleCall_0; }

		//Copy
		public RuleCall getCopyParserRuleCall_1() { return cCopyParserRuleCall_1; }

		//Move
		public RuleCall getMoveParserRuleCall_2() { return cMoveParserRuleCall_2; }

		//Delete
		public RuleCall getDeleteParserRuleCall_3() { return cDeleteParserRuleCall_3; }

		//PathVariable
		public RuleCall getPathVariableParserRuleCall_4() { return cPathVariableParserRuleCall_4; }
	}

	public class PathVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePathParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PathVariable:
		//	name=EString "=" value=Path;
		public ParserRule getRule() { return rule; }

		//name=EString "=" value=Path
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Path
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Path
		public RuleCall getValuePathParserRuleCall_2_0() { return cValuePathParserRuleCall_2_0; }
	}

	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStepsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStepsGenericStepParserRuleCall_0_0 = (RuleCall)cStepsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStepsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStepsGenericStepParserRuleCall_1_1_0 = (RuleCall)cStepsAssignment_1_1.eContents().get(0);
		
		//Path:
		//	steps+=GenericStep ("/" steps+=GenericStep)*;
		public ParserRule getRule() { return rule; }

		//steps+=GenericStep ("/" steps+=GenericStep)*
		public Group getGroup() { return cGroup; }

		//steps+=GenericStep
		public Assignment getStepsAssignment_0() { return cStepsAssignment_0; }

		//GenericStep
		public RuleCall getStepsGenericStepParserRuleCall_0_0() { return cStepsGenericStepParserRuleCall_0_0; }

		//("/" steps+=GenericStep)*
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//steps+=GenericStep
		public Assignment getStepsAssignment_1_1() { return cStepsAssignment_1_1; }

		//GenericStep
		public RuleCall getStepsGenericStepParserRuleCall_1_1_0() { return cStepsGenericStepParserRuleCall_1_1_0; }
	}

	public class GenericStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenericStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConcreteStepParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParametrizedStepParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GenericStep:
		//	ConcreteStep | VariableStep | ParametrizedStep;
		public ParserRule getRule() { return rule; }

		//ConcreteStep | VariableStep | ParametrizedStep
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConcreteStep
		public RuleCall getConcreteStepParserRuleCall_0() { return cConcreteStepParserRuleCall_0; }

		//VariableStep
		public RuleCall getVariableStepParserRuleCall_1() { return cVariableStepParserRuleCall_1; }

		//ParametrizedStep
		public RuleCall getParametrizedStepParserRuleCall_2() { return cParametrizedStepParserRuleCall_2; }
	}

	public class ConcreteStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcreteStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueEStringParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cAbsoluteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbsoluteColonKeyword_1_0 = (Keyword)cAbsoluteAssignment_1.eContents().get(0);
		
		//ConcreteStep:
		//	value=EString absolute?=":"?;
		public ParserRule getRule() { return rule; }

		//value=EString absolute?=":"?
		public Group getGroup() { return cGroup; }

		//value=EString
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//EString
		public RuleCall getValueEStringParserRuleCall_0_0() { return cValueEStringParserRuleCall_0_0; }

		//absolute?=":"?
		public Assignment getAbsoluteAssignment_1() { return cAbsoluteAssignment_1; }

		//":"
		public Keyword getAbsoluteColonKeyword_1_0() { return cAbsoluteColonKeyword_1_0; }
	}

	public class VariableStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValuePathVariableCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValuePathVariableEStringParserRuleCall_1_0_1 = (RuleCall)cValuePathVariableCrossReference_1_0.eContents().get(1);
		
		//VariableStep:
		//	"?" value=[PathVariable|EString];
		public ParserRule getRule() { return rule; }

		//"?" value=[PathVariable|EString]
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//value=[PathVariable|EString]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//[PathVariable|EString]
		public CrossReference getValuePathVariableCrossReference_1_0() { return cValuePathVariableCrossReference_1_0; }

		//EString
		public RuleCall getValuePathVariableEStringParserRuleCall_1_0_1() { return cValuePathVariableEStringParserRuleCall_1_0_1; }
	}

	public class ParametrizedStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParametrizedStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParametrizedStepAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParametrizedStep:
		//	{ParametrizedStep} "{$" name=EString "}";
		public ParserRule getRule() { return rule; }

		//{ParametrizedStep} "{$" name=EString "}"
		public Group getGroup() { return cGroup; }

		//{ParametrizedStep}
		public Action getParametrizedStepAction_0() { return cParametrizedStepAction_0; }

		//"{$"
		public Keyword getLeftCurlyBracketDollarSignKeyword_1() { return cLeftCurlyBracketDollarSignKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromPathParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhereKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWhereAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWhereFilterComponentParserRuleCall_4_1_0 = (RuleCall)cWhereAssignment_4_1.eContents().get(0);
		
		//Selection:
		//	"select" name=EString "from" from=Path ("where" where=FilterComponent)?;
		public ParserRule getRule() { return rule; }

		//"select" name=EString "from" from=Path ("where" where=FilterComponent)?
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//from=Path
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }

		//Path
		public RuleCall getFromPathParserRuleCall_3_0() { return cFromPathParserRuleCall_3_0; }

		//("where" where=FilterComponent)?
		public Group getGroup_4() { return cGroup_4; }

		//"where"
		public Keyword getWhereKeyword_4_0() { return cWhereKeyword_4_0; }

		//where=FilterComponent
		public Assignment getWhereAssignment_4_1() { return cWhereAssignment_4_1; }

		//FilterComponent
		public RuleCall getWhereFilterComponentParserRuleCall_4_1_0() { return cWhereFilterComponentParserRuleCall_4_1_0; }
	}

	public class CopyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Copy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCopyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceSelectionCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceSelectionEStringParserRuleCall_2_0_1 = (RuleCall)cSourceSelectionCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDestinationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDestinationPathParserRuleCall_4_0 = (RuleCall)cDestinationAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cStrategyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStrategyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStrategyStrategiesEnumRuleCall_5_1_0 = (RuleCall)cStrategyAssignment_5_1.eContents().get(0);
		
		//Copy:
		//	"copy" "from" source=[Selection|EString] "to" destination=Path ("strategy:" strategy=Strategies)?;
		public ParserRule getRule() { return rule; }

		//"copy" "from" source=[Selection|EString] "to" destination=Path ("strategy:" strategy=Strategies)?
		public Group getGroup() { return cGroup; }

		//"copy"
		public Keyword getCopyKeyword_0() { return cCopyKeyword_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//source=[Selection|EString]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Selection|EString]
		public CrossReference getSourceSelectionCrossReference_2_0() { return cSourceSelectionCrossReference_2_0; }

		//EString
		public RuleCall getSourceSelectionEStringParserRuleCall_2_0_1() { return cSourceSelectionEStringParserRuleCall_2_0_1; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//destination=Path
		public Assignment getDestinationAssignment_4() { return cDestinationAssignment_4; }

		//Path
		public RuleCall getDestinationPathParserRuleCall_4_0() { return cDestinationPathParserRuleCall_4_0; }

		//("strategy:" strategy=Strategies)?
		public Group getGroup_5() { return cGroup_5; }

		//"strategy:"
		public Keyword getStrategyKeyword_5_0() { return cStrategyKeyword_5_0; }

		//strategy=Strategies
		public Assignment getStrategyAssignment_5_1() { return cStrategyAssignment_5_1; }

		//Strategies
		public RuleCall getStrategyStrategiesEnumRuleCall_5_1_0() { return cStrategyStrategiesEnumRuleCall_5_1_0; }
	}

	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceSelectionCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceSelectionEStringParserRuleCall_2_0_1 = (RuleCall)cSourceSelectionCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDestinationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDestinationPathParserRuleCall_4_0 = (RuleCall)cDestinationAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cStrategyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStrategyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStrategyStrategiesEnumRuleCall_5_1_0 = (RuleCall)cStrategyAssignment_5_1.eContents().get(0);
		
		//Move:
		//	"move" "from" source=[Selection|EString] "to" destination=Path ("strategy:" strategy=Strategies)?;
		public ParserRule getRule() { return rule; }

		//"move" "from" source=[Selection|EString] "to" destination=Path ("strategy:" strategy=Strategies)?
		public Group getGroup() { return cGroup; }

		//"move"
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//source=[Selection|EString]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Selection|EString]
		public CrossReference getSourceSelectionCrossReference_2_0() { return cSourceSelectionCrossReference_2_0; }

		//EString
		public RuleCall getSourceSelectionEStringParserRuleCall_2_0_1() { return cSourceSelectionEStringParserRuleCall_2_0_1; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//destination=Path
		public Assignment getDestinationAssignment_4() { return cDestinationAssignment_4; }

		//Path
		public RuleCall getDestinationPathParserRuleCall_4_0() { return cDestinationPathParserRuleCall_4_0; }

		//("strategy:" strategy=Strategies)?
		public Group getGroup_5() { return cGroup_5; }

		//"strategy:"
		public Keyword getStrategyKeyword_5_0() { return cStrategyKeyword_5_0; }

		//strategy=Strategies
		public Assignment getStrategyAssignment_5_1() { return cStrategyAssignment_5_1; }

		//Strategies
		public RuleCall getStrategyStrategiesEnumRuleCall_5_1_0() { return cStrategyStrategiesEnumRuleCall_5_1_0; }
	}

	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Delete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceSelectionCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceSelectionEStringParserRuleCall_2_0_1 = (RuleCall)cSourceSelectionCrossReference_2_0.eContents().get(1);
		
		//Delete:
		//	"delete" "from" source=[Selection|EString];
		public ParserRule getRule() { return rule; }

		//"delete" "from" source=[Selection|EString]
		public Group getGroup() { return cGroup; }

		//"delete"
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//source=[Selection|EString]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Selection|EString]
		public CrossReference getSourceSelectionCrossReference_2_0() { return cSourceSelectionCrossReference_2_0; }

		//EString
		public RuleCall getSourceSelectionEStringParserRuleCall_2_0_1() { return cSourceSelectionEStringParserRuleCall_2_0_1; }
	}

	public class FilterContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinksLinkParserRuleCall_1_0 = (RuleCall)cLinksAssignment_1.eContents().get(0);
		private final Assignment cLinksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinksLinkParserRuleCall_2_0 = (RuleCall)cLinksAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FilterContainer:
		//	"(" links+=Link links+=Link* ")";
		public ParserRule getRule() { return rule; }

		//"(" links+=Link links+=Link* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//links+=Link
		public Assignment getLinksAssignment_1() { return cLinksAssignment_1; }

		//Link
		public RuleCall getLinksLinkParserRuleCall_1_0() { return cLinksLinkParserRuleCall_1_0; }

		//links+=Link*
		public Assignment getLinksAssignment_2() { return cLinksAssignment_2; }

		//Link
		public RuleCall getLinksLinkParserRuleCall_2_0() { return cLinksLinkParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cAndAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cAndAndKeyword_0_0_0 = (Keyword)cAndAssignment_0_0.eContents().get(0);
		private final Assignment cOrAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cOrOrKeyword_0_1_0 = (Keyword)cOrAssignment_0_1.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementFilterComponentParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//Link:
		//	(and?="and" | or?="or")? element=FilterComponent;
		public ParserRule getRule() { return rule; }

		//(and?="and" | or?="or")? element=FilterComponent
		public Group getGroup() { return cGroup; }

		//(and?="and" | or?="or")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//and?="and"
		public Assignment getAndAssignment_0_0() { return cAndAssignment_0_0; }

		//"and"
		public Keyword getAndAndKeyword_0_0_0() { return cAndAndKeyword_0_0_0; }

		//or?="or"
		public Assignment getOrAssignment_0_1() { return cOrAssignment_0_1; }

		//"or"
		public Keyword getOrOrKeyword_0_1_0() { return cOrOrKeyword_0_1_0; }

		//element=FilterComponent
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }

		//FilterComponent
		public RuleCall getElementFilterComponentParserRuleCall_1_0() { return cElementFilterComponentParserRuleCall_1_0; }
	}

	public class FilterComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOnNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOnExtensionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOnTimeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOnAttributesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOnTagsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOnSizeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFilterContainerParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIsEmptyParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOnTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		////FilterContainer returns FilterContainer:
		////	compositionType=CompositionType
		////	'(' segments+=FilterComponent ( "," segments+=FilterComponent)* ')' 
		////	;
		//FilterComponent:
		//	OnName | OnExtension | OnTime | OnAttributes | OnTags | OnSize | FilterContainer | IsEmpty | OnType;
		public ParserRule getRule() { return rule; }

		//OnName | OnExtension | OnTime | OnAttributes | OnTags | OnSize | FilterContainer | IsEmpty | OnType
		public Alternatives getAlternatives() { return cAlternatives; }

		//OnName
		public RuleCall getOnNameParserRuleCall_0() { return cOnNameParserRuleCall_0; }

		//OnExtension
		public RuleCall getOnExtensionParserRuleCall_1() { return cOnExtensionParserRuleCall_1; }

		//OnTime
		public RuleCall getOnTimeParserRuleCall_2() { return cOnTimeParserRuleCall_2; }

		//OnAttributes
		public RuleCall getOnAttributesParserRuleCall_3() { return cOnAttributesParserRuleCall_3; }

		//OnTags
		public RuleCall getOnTagsParserRuleCall_4() { return cOnTagsParserRuleCall_4; }

		//OnSize
		public RuleCall getOnSizeParserRuleCall_5() { return cOnSizeParserRuleCall_5; }

		//FilterContainer
		public RuleCall getFilterContainerParserRuleCall_6() { return cFilterContainerParserRuleCall_6; }

		//IsEmpty
		public RuleCall getIsEmptyParserRuleCall_7() { return cIsEmptyParserRuleCall_7; }

		//OnType
		public RuleCall getOnTypeParserRuleCall_8() { return cOnTypeParserRuleCall_8; }
	}

	public class OnAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cInverseAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cInverseNotKeyword_2_0_0_0 = (Keyword)cInverseAssignment_2_0_0.eContents().get(0);
		private final Keyword cExistKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cIsKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInverseAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Keyword cInverseNotKeyword_2_1_1_0 = (Keyword)cInverseAssignment_2_1_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cValueEStringParserRuleCall_2_1_2_0 = (RuleCall)cValueAssignment_2_1_2.eContents().get(0);
		
		//OnAttributes:
		//	"attribute" name=EString (inverse?="not"? "exist" | "is" inverse?="not"? value=EString);
		public ParserRule getRule() { return rule; }

		//"attribute" name=EString (inverse?="not"? "exist" | "is" inverse?="not"? value=EString)
		public Group getGroup() { return cGroup; }

		//"attribute"
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//inverse?="not"? "exist" | "is" inverse?="not"? value=EString
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//inverse?="not"? "exist"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//inverse?="not"?
		public Assignment getInverseAssignment_2_0_0() { return cInverseAssignment_2_0_0; }

		//"not"
		public Keyword getInverseNotKeyword_2_0_0_0() { return cInverseNotKeyword_2_0_0_0; }

		//"exist"
		public Keyword getExistKeyword_2_0_1() { return cExistKeyword_2_0_1; }

		//"is" inverse?="not"? value=EString
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"is"
		public Keyword getIsKeyword_2_1_0() { return cIsKeyword_2_1_0; }

		//inverse?="not"?
		public Assignment getInverseAssignment_2_1_1() { return cInverseAssignment_2_1_1; }

		//"not"
		public Keyword getInverseNotKeyword_2_1_1_0() { return cInverseNotKeyword_2_1_1_0; }

		//value=EString
		public Assignment getValueAssignment_2_1_2() { return cValueAssignment_2_1_2; }

		//EString
		public RuleCall getValueEStringParserRuleCall_2_1_2_0() { return cValueEStringParserRuleCall_2_1_2_0; }
	}

	public class OnTagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnTags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTagsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTagsEStringParserRuleCall_1_0_0 = (RuleCall)cTagsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTagsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTagsEStringParserRuleCall_1_1_1_0 = (RuleCall)cTagsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cQuantificatorAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cQuantificatorQuantificatorsEnumRuleCall_3_0_0 = (RuleCall)cQuantificatorAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cTresholdAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cTresholdEIntParserRuleCall_3_1_0_0 = (RuleCall)cTresholdAssignment_3_1_0.eContents().get(0);
		private final Keyword cAreKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cInverseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cInverseNotKeyword_4_0 = (Keyword)cInverseAssignment_4.eContents().get(0);
		private final Keyword cInTagsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOnlyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cOnlyAndNoMoreTagsKeyword_6_0 = (Keyword)cOnlyAssignment_6.eContents().get(0);
		
		//OnTags:
		//	"in [" (tags+=EString ("," tags+=EString)*)? "]" (quantificator=Quantificators | treshold=EInt "are") inverse?="not"?
		//	"in tags" only?="and no more tags"?;
		public ParserRule getRule() { return rule; }

		//"in [" (tags+=EString ("," tags+=EString)*)? "]" (quantificator=Quantificators | treshold=EInt "are") inverse?="not"?
		//"in tags" only?="and no more tags"?
		public Group getGroup() { return cGroup; }

		//"in ["
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//(tags+=EString ("," tags+=EString)*)?
		public Group getGroup_1() { return cGroup_1; }

		//tags+=EString
		public Assignment getTagsAssignment_1_0() { return cTagsAssignment_1_0; }

		//EString
		public RuleCall getTagsEStringParserRuleCall_1_0_0() { return cTagsEStringParserRuleCall_1_0_0; }

		//("," tags+=EString)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//tags+=EString
		public Assignment getTagsAssignment_1_1_1() { return cTagsAssignment_1_1_1; }

		//EString
		public RuleCall getTagsEStringParserRuleCall_1_1_1_0() { return cTagsEStringParserRuleCall_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//quantificator=Quantificators | treshold=EInt "are"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//quantificator=Quantificators
		public Assignment getQuantificatorAssignment_3_0() { return cQuantificatorAssignment_3_0; }

		//Quantificators
		public RuleCall getQuantificatorQuantificatorsEnumRuleCall_3_0_0() { return cQuantificatorQuantificatorsEnumRuleCall_3_0_0; }

		//treshold=EInt "are"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//treshold=EInt
		public Assignment getTresholdAssignment_3_1_0() { return cTresholdAssignment_3_1_0; }

		//EInt
		public RuleCall getTresholdEIntParserRuleCall_3_1_0_0() { return cTresholdEIntParserRuleCall_3_1_0_0; }

		//"are"
		public Keyword getAreKeyword_3_1_1() { return cAreKeyword_3_1_1; }

		//inverse?="not"?
		public Assignment getInverseAssignment_4() { return cInverseAssignment_4; }

		//"not"
		public Keyword getInverseNotKeyword_4_0() { return cInverseNotKeyword_4_0; }

		//"in tags"
		public Keyword getInTagsKeyword_5() { return cInTagsKeyword_5; }

		//only?="and no more tags"?
		public Assignment getOnlyAssignment_6() { return cOnlyAssignment_6; }

		//"and no more tags"
		public Keyword getOnlyAndNoMoreTagsKeyword_6_0() { return cOnlyAndNoMoreTagsKeyword_6_0; }
	}

	public class OnTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTimeOfAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTimeOfTimeTypeEnumRuleCall_0_0 = (RuleCall)cTimeOfAssignment_0.eContents().get(0);
		private final Keyword cBeforeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cTresholdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTresholdEIntParserRuleCall_3_0 = (RuleCall)cTresholdAssignment_3.eContents().get(0);
		private final Assignment cUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitTimeUnitEnumRuleCall_4_0 = (RuleCall)cUnitAssignment_4.eContents().get(0);
		
		/// *OnTags returns OnTags:
		//	{OnTags}
		//	(inverse?='inverse')?
		//	(only?='only')?
		//	'OnTags'
		//	'{'
		//		('tags' '{' tags+=EString ( "," tags+=EString)* '}' )?
		//		('treshold' treshold=EInt)?
		//		('quantificator' quantificator=Quantificators)?
		//	'}'; * / OnTime:
		//	timeOf=TimeType "before" operator=Operator treshold=EInt unit=TimeUnit;
		public ParserRule getRule() { return rule; }

		//timeOf=TimeType "before" operator=Operator treshold=EInt unit=TimeUnit
		public Group getGroup() { return cGroup; }

		//timeOf=TimeType
		public Assignment getTimeOfAssignment_0() { return cTimeOfAssignment_0; }

		//TimeType
		public RuleCall getTimeOfTimeTypeEnumRuleCall_0_0() { return cTimeOfTimeTypeEnumRuleCall_0_0; }

		//"before"
		public Keyword getBeforeKeyword_1() { return cBeforeKeyword_1; }

		//operator=Operator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_2_0() { return cOperatorOperatorEnumRuleCall_2_0; }

		//treshold=EInt
		public Assignment getTresholdAssignment_3() { return cTresholdAssignment_3; }

		//EInt
		public RuleCall getTresholdEIntParserRuleCall_3_0() { return cTresholdEIntParserRuleCall_3_0; }

		//unit=TimeUnit
		public Assignment getUnitAssignment_4() { return cUnitAssignment_4; }

		//TimeUnit
		public RuleCall getUnitTimeUnitEnumRuleCall_4_0() { return cUnitTimeUnitEnumRuleCall_4_0; }
	}

	public class OnSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeOfFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInverseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInverseNotKeyword_1_0 = (Keyword)cInverseAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cTresholdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTresholdEIntParserRuleCall_3_0 = (RuleCall)cTresholdAssignment_3.eContents().get(0);
		private final Assignment cUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitMemoryUnitEnumRuleCall_4_0 = (RuleCall)cUnitAssignment_4.eContents().get(0);
		
		//OnSize:
		//	"size of file" inverse?="not"? operator=Operator treshold=EInt unit=MemoryUnit;
		public ParserRule getRule() { return rule; }

		//"size of file" inverse?="not"? operator=Operator treshold=EInt unit=MemoryUnit
		public Group getGroup() { return cGroup; }

		//"size of file"
		public Keyword getSizeOfFileKeyword_0() { return cSizeOfFileKeyword_0; }

		//inverse?="not"?
		public Assignment getInverseAssignment_1() { return cInverseAssignment_1; }

		//"not"
		public Keyword getInverseNotKeyword_1_0() { return cInverseNotKeyword_1_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_2_0() { return cOperatorOperatorEnumRuleCall_2_0; }

		//treshold=EInt
		public Assignment getTresholdAssignment_3() { return cTresholdAssignment_3; }

		//EInt
		public RuleCall getTresholdEIntParserRuleCall_3_0() { return cTresholdEIntParserRuleCall_3_0; }

		//unit=MemoryUnit
		public Assignment getUnitAssignment_4() { return cUnitAssignment_4; }

		//MemoryUnit
		public RuleCall getUnitMemoryUnitEnumRuleCall_4_0() { return cUnitMemoryUnitEnumRuleCall_4_0; }
	}

	public class OnNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOnNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNameIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInverseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cInverseNotKeyword_2_0 = (Keyword)cInverseAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//OnName:
		//	{OnName} "name is" inverse?="not"? name=EString;
		public ParserRule getRule() { return rule; }

		//{OnName} "name is" inverse?="not"? name=EString
		public Group getGroup() { return cGroup; }

		//{OnName}
		public Action getOnNameAction_0() { return cOnNameAction_0; }

		//"name is"
		public Keyword getNameIsKeyword_1() { return cNameIsKeyword_1; }

		//inverse?="not"?
		public Assignment getInverseAssignment_2() { return cInverseAssignment_2; }

		//"not"
		public Keyword getInverseNotKeyword_2_0() { return cInverseNotKeyword_2_0; }

		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
	}

	public class OnExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOnExtensionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExtensionIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInverseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cInverseNotKeyword_2_0 = (Keyword)cInverseAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cExtensionsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cExtensionsEStringParserRuleCall_4_0_0 = (RuleCall)cExtensionsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cExtensionsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cExtensionsEStringParserRuleCall_4_1_1_0 = (RuleCall)cExtensionsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OnExtension:
		//	{OnExtension} "extension is" inverse?="not"? "in [" (extensions+=EString ("," extensions+=EString)*)? "]";
		public ParserRule getRule() { return rule; }

		//{OnExtension} "extension is" inverse?="not"? "in [" (extensions+=EString ("," extensions+=EString)*)? "]"
		public Group getGroup() { return cGroup; }

		//{OnExtension}
		public Action getOnExtensionAction_0() { return cOnExtensionAction_0; }

		//"extension is"
		public Keyword getExtensionIsKeyword_1() { return cExtensionIsKeyword_1; }

		//inverse?="not"?
		public Assignment getInverseAssignment_2() { return cInverseAssignment_2; }

		//"not"
		public Keyword getInverseNotKeyword_2_0() { return cInverseNotKeyword_2_0; }

		//"in ["
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//(extensions+=EString ("," extensions+=EString)*)?
		public Group getGroup_4() { return cGroup_4; }

		//extensions+=EString
		public Assignment getExtensionsAssignment_4_0() { return cExtensionsAssignment_4_0; }

		//EString
		public RuleCall getExtensionsEStringParserRuleCall_4_0_0() { return cExtensionsEStringParserRuleCall_4_0_0; }

		//("," extensions+=EString)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//extensions+=EString
		public Assignment getExtensionsAssignment_4_1_1() { return cExtensionsAssignment_4_1_1; }

		//EString
		public RuleCall getExtensionsEStringParserRuleCall_4_1_1_0() { return cExtensionsEStringParserRuleCall_4_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class IsEmptyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsEmpty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsEmptyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInverseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cInverseNotKeyword_2_0 = (Keyword)cInverseAssignment_2.eContents().get(0);
		private final Keyword cEmptyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IsEmpty:
		//	{IsEmpty} "is" inverse?="not"? "empty";
		public ParserRule getRule() { return rule; }

		//{IsEmpty} "is" inverse?="not"? "empty"
		public Group getGroup() { return cGroup; }

		//{IsEmpty}
		public Action getIsEmptyAction_0() { return cIsEmptyAction_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//inverse?="not"?
		public Assignment getInverseAssignment_2() { return cInverseAssignment_2; }

		//"not"
		public Keyword getInverseNotKeyword_2_0() { return cInverseNotKeyword_2_0; }

		//"empty"
		public Keyword getEmptyKeyword_3() { return cEmptyKeyword_3; }
	}

	public class OnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInverseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cInverseNotKeyword_2_0 = (Keyword)cInverseAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeFileTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//OnType:
		//	"file" "is" inverse?="not"? type=FileType;
		public ParserRule getRule() { return rule; }

		//"file" "is" inverse?="not"? type=FileType
		public Group getGroup() { return cGroup; }

		//"file"
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//inverse?="not"?
		public Assignment getInverseAssignment_2() { return cInverseAssignment_2; }

		//"not"
		public Keyword getInverseNotKeyword_2_0() { return cInverseNotKeyword_2_0; }

		//type=FileType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//FileType
		public RuleCall getTypeFileTypeEnumRuleCall_3_0() { return cTypeFileTypeEnumRuleCall_3_0; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	public class StrategiesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Strategies");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cForcedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cForcedForcedKeyword_0_0 = (Keyword)cForcedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAppendEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAppendAppendKeyword_1_0 = (Keyword)cAppendEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCarefullyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCarefullyCarefullyKeyword_2_0 = (Keyword)cCarefullyEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Strategies:
		//	forced | append | carefully;
		public EnumRule getRule() { return rule; }

		//forced | append | carefully
		public Alternatives getAlternatives() { return cAlternatives; }

		//forced
		public EnumLiteralDeclaration getForcedEnumLiteralDeclaration_0() { return cForcedEnumLiteralDeclaration_0; }

		//"forced"
		public Keyword getForcedForcedKeyword_0_0() { return cForcedForcedKeyword_0_0; }

		//append
		public EnumLiteralDeclaration getAppendEnumLiteralDeclaration_1() { return cAppendEnumLiteralDeclaration_1; }

		//"append"
		public Keyword getAppendAppendKeyword_1_0() { return cAppendAppendKeyword_1_0; }

		//carefully
		public EnumLiteralDeclaration getCarefullyEnumLiteralDeclaration_2() { return cCarefullyEnumLiteralDeclaration_2; }

		//"carefully"
		public Keyword getCarefullyCarefullyKeyword_2_0() { return cCarefullyCarefullyKeyword_2_0; }
	}

	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessLessThanSignKeyword_1_0 = (Keyword)cLessEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMoreEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMoreGreaterThanSignKeyword_2_0 = (Keyword)cMoreEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLess_equalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLess_equalLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLess_equalEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMore_equalEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMore_equalGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cMore_equalEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Operator:
		//	equal="==" | less="<" | more=">" | less_equal="<=" | more_equal=">=";
		public EnumRule getRule() { return rule; }

		//equal="==" | less="<" | more=">" | less_equal="<=" | more_equal=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//equal="=="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEqualEqualsSignEqualsSignKeyword_0_0() { return cEqualEqualsSignEqualsSignKeyword_0_0; }

		//less="<"
		public EnumLiteralDeclaration getLessEnumLiteralDeclaration_1() { return cLessEnumLiteralDeclaration_1; }

		//"<"
		public Keyword getLessLessThanSignKeyword_1_0() { return cLessLessThanSignKeyword_1_0; }

		//more=">"
		public EnumLiteralDeclaration getMoreEnumLiteralDeclaration_2() { return cMoreEnumLiteralDeclaration_2; }

		//">"
		public Keyword getMoreGreaterThanSignKeyword_2_0() { return cMoreGreaterThanSignKeyword_2_0; }

		//less_equal="<="
		public EnumLiteralDeclaration getLess_equalEnumLiteralDeclaration_3() { return cLess_equalEnumLiteralDeclaration_3; }

		//"<="
		public Keyword getLess_equalLessThanSignEqualsSignKeyword_3_0() { return cLess_equalLessThanSignEqualsSignKeyword_3_0; }

		//more_equal=">="
		public EnumLiteralDeclaration getMore_equalEnumLiteralDeclaration_4() { return cMore_equalEnumLiteralDeclaration_4; }

		//">="
		public Keyword getMore_equalGreaterThanSignEqualsSignKeyword_4_0() { return cMore_equalGreaterThanSignEqualsSignKeyword_4_0; }
	}

	public class TimeUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinsMinsKeyword_0_0 = (Keyword)cMinsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHoursEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHoursHoursKeyword_1_0 = (Keyword)cHoursEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDaysEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDaysDaysKeyword_2_0 = (Keyword)cDaysEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWeeksEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWeeksWeeksKeyword_3_0 = (Keyword)cWeeksEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMonthsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMonthsMonthsKeyword_4_0 = (Keyword)cMonthsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cYearsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cYearsYearsKeyword_5_0 = (Keyword)cYearsEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum TimeUnit:
		//	mins | hours | days | weeks | months | years;
		public EnumRule getRule() { return rule; }

		//mins | hours | days | weeks | months | years
		public Alternatives getAlternatives() { return cAlternatives; }

		//mins
		public EnumLiteralDeclaration getMinsEnumLiteralDeclaration_0() { return cMinsEnumLiteralDeclaration_0; }

		//"mins"
		public Keyword getMinsMinsKeyword_0_0() { return cMinsMinsKeyword_0_0; }

		//hours
		public EnumLiteralDeclaration getHoursEnumLiteralDeclaration_1() { return cHoursEnumLiteralDeclaration_1; }

		//"hours"
		public Keyword getHoursHoursKeyword_1_0() { return cHoursHoursKeyword_1_0; }

		//days
		public EnumLiteralDeclaration getDaysEnumLiteralDeclaration_2() { return cDaysEnumLiteralDeclaration_2; }

		//"days"
		public Keyword getDaysDaysKeyword_2_0() { return cDaysDaysKeyword_2_0; }

		//weeks
		public EnumLiteralDeclaration getWeeksEnumLiteralDeclaration_3() { return cWeeksEnumLiteralDeclaration_3; }

		//"weeks"
		public Keyword getWeeksWeeksKeyword_3_0() { return cWeeksWeeksKeyword_3_0; }

		//months
		public EnumLiteralDeclaration getMonthsEnumLiteralDeclaration_4() { return cMonthsEnumLiteralDeclaration_4; }

		//"months"
		public Keyword getMonthsMonthsKeyword_4_0() { return cMonthsMonthsKeyword_4_0; }

		//years
		public EnumLiteralDeclaration getYearsEnumLiteralDeclaration_5() { return cYearsEnumLiteralDeclaration_5; }

		//"years"
		public Keyword getYearsYearsKeyword_5_0() { return cYearsYearsKeyword_5_0; }
	}

	public class TimeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cModifiedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cModifiedModifiedKeyword_0_0 = (Keyword)cModifiedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCreatedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCreatedCreatedKeyword_1_0 = (Keyword)cCreatedEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TimeType:
		//	modified | created;
		public EnumRule getRule() { return rule; }

		//modified | created
		public Alternatives getAlternatives() { return cAlternatives; }

		//modified
		public EnumLiteralDeclaration getModifiedEnumLiteralDeclaration_0() { return cModifiedEnumLiteralDeclaration_0; }

		//"modified"
		public Keyword getModifiedModifiedKeyword_0_0() { return cModifiedModifiedKeyword_0_0; }

		//created
		public EnumLiteralDeclaration getCreatedEnumLiteralDeclaration_1() { return cCreatedEnumLiteralDeclaration_1; }

		//"created"
		public Keyword getCreatedCreatedKeyword_1_0() { return cCreatedCreatedKeyword_1_0; }
	}

	public class QuantificatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Quantificators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAnyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAnyAnyAreKeyword_0_0 = (Keyword)cAnyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAllEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAllAllAreKeyword_1_0 = (Keyword)cAllEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Quantificators:
		//	any="any are" | all="all are";
		public EnumRule getRule() { return rule; }

		//any="any are" | all="all are"
		public Alternatives getAlternatives() { return cAlternatives; }

		//any="any are"
		public EnumLiteralDeclaration getAnyEnumLiteralDeclaration_0() { return cAnyEnumLiteralDeclaration_0; }

		//"any are"
		public Keyword getAnyAnyAreKeyword_0_0() { return cAnyAnyAreKeyword_0_0; }

		//all="all are"
		public EnumLiteralDeclaration getAllEnumLiteralDeclaration_1() { return cAllEnumLiteralDeclaration_1; }

		//"all are"
		public Keyword getAllAllAreKeyword_1_0() { return cAllAllAreKeyword_1_0; }
	}

	public class MemoryUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MemoryUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cKBEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cKBKBKeyword_0_0 = (Keyword)cKBEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMBMBKeyword_1_0 = (Keyword)cMBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGBEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGBGBKeyword_2_0 = (Keyword)cGBEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTBEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTBTBKeyword_3_0 = (Keyword)cTBEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum MemoryUnit:
		//	KB | MB | GB | TB;
		public EnumRule getRule() { return rule; }

		//KB | MB | GB | TB
		public Alternatives getAlternatives() { return cAlternatives; }

		//KB
		public EnumLiteralDeclaration getKBEnumLiteralDeclaration_0() { return cKBEnumLiteralDeclaration_0; }

		//"KB"
		public Keyword getKBKBKeyword_0_0() { return cKBKBKeyword_0_0; }

		//MB
		public EnumLiteralDeclaration getMBEnumLiteralDeclaration_1() { return cMBEnumLiteralDeclaration_1; }

		//"MB"
		public Keyword getMBMBKeyword_1_0() { return cMBMBKeyword_1_0; }

		//GB
		public EnumLiteralDeclaration getGBEnumLiteralDeclaration_2() { return cGBEnumLiteralDeclaration_2; }

		//"GB"
		public Keyword getGBGBKeyword_2_0() { return cGBGBKeyword_2_0; }

		//TB
		public EnumLiteralDeclaration getTBEnumLiteralDeclaration_3() { return cTBEnumLiteralDeclaration_3; }

		//"TB"
		public Keyword getTBTBKeyword_3_0() { return cTBTBKeyword_3_0; }
	}

	public class FileTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FileType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDocumentEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDocumentDocumentKeyword_0_0 = (Keyword)cDocumentEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDirectoryEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDirectoryDirectoryKeyword_1_0 = (Keyword)cDirectoryEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum FileType:
		//	Document | Directory;
		public EnumRule getRule() { return rule; }

		//Document | Directory
		public Alternatives getAlternatives() { return cAlternatives; }

		//Document
		public EnumLiteralDeclaration getDocumentEnumLiteralDeclaration_0() { return cDocumentEnumLiteralDeclaration_0; }

		//"Document"
		public Keyword getDocumentDocumentKeyword_0_0() { return cDocumentDocumentKeyword_0_0; }

		//Directory
		public EnumLiteralDeclaration getDirectoryEnumLiteralDeclaration_1() { return cDirectoryEnumLiteralDeclaration_1; }

		//"Directory"
		public Keyword getDirectoryDirectoryKeyword_1_0() { return cDirectoryDirectoryKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private ExecutionElements pExecution;
	private PathVariableElements pPathVariable;
	private PathElements pPath;
	private GenericStepElements pGenericStep;
	private ConcreteStepElements pConcreteStep;
	private VariableStepElements pVariableStep;
	private ParametrizedStepElements pParametrizedStep;
	private SelectionElements pSelection;
	private CopyElements pCopy;
	private MoveElements pMove;
	private DeleteElements pDelete;
	private FilterContainerElements pFilterContainer;
	private LinkElements pLink;
	private FilterComponentElements pFilterComponent;
	private OnAttributesElements pOnAttributes;
	private OnTagsElements pOnTags;
	private OnTimeElements pOnTime;
	private OnSizeElements pOnSize;
	private OnNameElements pOnName;
	private OnExtensionElements pOnExtension;
	private IsEmptyElements pIsEmpty;
	private OnTypeElements pOnType;
	private StrategiesElements unknownRuleStrategies;
	private OperatorElements unknownRuleOperator;
	private TimeUnitElements unknownRuleTimeUnit;
	private TimeTypeElements unknownRuleTimeType;
	private QuantificatorsElements unknownRuleQuantificators;
	private MemoryUnitElements unknownRuleMemoryUnit;
	private FileTypeElements unknownRuleFileType;
	private EIntElements pEInt;
	private EBooleanElements pEBoolean;
	private EStringElements pEString;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FETLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.myFetl.FETL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} executions+=Execution (";" executions+=Execution)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Execution:
	//	Selection | Copy | Move | Delete | PathVariable;
	public ExecutionElements getExecutionAccess() {
		return (pExecution != null) ? pExecution : (pExecution = new ExecutionElements());
	}
	
	public ParserRule getExecutionRule() {
		return getExecutionAccess().getRule();
	}

	//PathVariable:
	//	name=EString "=" value=Path;
	public PathVariableElements getPathVariableAccess() {
		return (pPathVariable != null) ? pPathVariable : (pPathVariable = new PathVariableElements());
	}
	
	public ParserRule getPathVariableRule() {
		return getPathVariableAccess().getRule();
	}

	//Path:
	//	steps+=GenericStep ("/" steps+=GenericStep)*;
	public PathElements getPathAccess() {
		return (pPath != null) ? pPath : (pPath = new PathElements());
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}

	//GenericStep:
	//	ConcreteStep | VariableStep | ParametrizedStep;
	public GenericStepElements getGenericStepAccess() {
		return (pGenericStep != null) ? pGenericStep : (pGenericStep = new GenericStepElements());
	}
	
	public ParserRule getGenericStepRule() {
		return getGenericStepAccess().getRule();
	}

	//ConcreteStep:
	//	value=EString absolute?=":"?;
	public ConcreteStepElements getConcreteStepAccess() {
		return (pConcreteStep != null) ? pConcreteStep : (pConcreteStep = new ConcreteStepElements());
	}
	
	public ParserRule getConcreteStepRule() {
		return getConcreteStepAccess().getRule();
	}

	//VariableStep:
	//	"?" value=[PathVariable|EString];
	public VariableStepElements getVariableStepAccess() {
		return (pVariableStep != null) ? pVariableStep : (pVariableStep = new VariableStepElements());
	}
	
	public ParserRule getVariableStepRule() {
		return getVariableStepAccess().getRule();
	}

	//ParametrizedStep:
	//	{ParametrizedStep} "{$" name=EString "}";
	public ParametrizedStepElements getParametrizedStepAccess() {
		return (pParametrizedStep != null) ? pParametrizedStep : (pParametrizedStep = new ParametrizedStepElements());
	}
	
	public ParserRule getParametrizedStepRule() {
		return getParametrizedStepAccess().getRule();
	}

	//Selection:
	//	"select" name=EString "from" from=Path ("where" where=FilterComponent)?;
	public SelectionElements getSelectionAccess() {
		return (pSelection != null) ? pSelection : (pSelection = new SelectionElements());
	}
	
	public ParserRule getSelectionRule() {
		return getSelectionAccess().getRule();
	}

	//Copy:
	//	"copy" "from" source=[Selection|EString] "to" destination=Path ("strategy:" strategy=Strategies)?;
	public CopyElements getCopyAccess() {
		return (pCopy != null) ? pCopy : (pCopy = new CopyElements());
	}
	
	public ParserRule getCopyRule() {
		return getCopyAccess().getRule();
	}

	//Move:
	//	"move" "from" source=[Selection|EString] "to" destination=Path ("strategy:" strategy=Strategies)?;
	public MoveElements getMoveAccess() {
		return (pMove != null) ? pMove : (pMove = new MoveElements());
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}

	//Delete:
	//	"delete" "from" source=[Selection|EString];
	public DeleteElements getDeleteAccess() {
		return (pDelete != null) ? pDelete : (pDelete = new DeleteElements());
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}

	//FilterContainer:
	//	"(" links+=Link links+=Link* ")";
	public FilterContainerElements getFilterContainerAccess() {
		return (pFilterContainer != null) ? pFilterContainer : (pFilterContainer = new FilterContainerElements());
	}
	
	public ParserRule getFilterContainerRule() {
		return getFilterContainerAccess().getRule();
	}

	//Link:
	//	(and?="and" | or?="or")? element=FilterComponent;
	public LinkElements getLinkAccess() {
		return (pLink != null) ? pLink : (pLink = new LinkElements());
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	////FilterContainer returns FilterContainer:
	////	compositionType=CompositionType
	////	'(' segments+=FilterComponent ( "," segments+=FilterComponent)* ')' 
	////	;
	//FilterComponent:
	//	OnName | OnExtension | OnTime | OnAttributes | OnTags | OnSize | FilterContainer | IsEmpty | OnType;
	public FilterComponentElements getFilterComponentAccess() {
		return (pFilterComponent != null) ? pFilterComponent : (pFilterComponent = new FilterComponentElements());
	}
	
	public ParserRule getFilterComponentRule() {
		return getFilterComponentAccess().getRule();
	}

	//OnAttributes:
	//	"attribute" name=EString (inverse?="not"? "exist" | "is" inverse?="not"? value=EString);
	public OnAttributesElements getOnAttributesAccess() {
		return (pOnAttributes != null) ? pOnAttributes : (pOnAttributes = new OnAttributesElements());
	}
	
	public ParserRule getOnAttributesRule() {
		return getOnAttributesAccess().getRule();
	}

	//OnTags:
	//	"in [" (tags+=EString ("," tags+=EString)*)? "]" (quantificator=Quantificators | treshold=EInt "are") inverse?="not"?
	//	"in tags" only?="and no more tags"?;
	public OnTagsElements getOnTagsAccess() {
		return (pOnTags != null) ? pOnTags : (pOnTags = new OnTagsElements());
	}
	
	public ParserRule getOnTagsRule() {
		return getOnTagsAccess().getRule();
	}

	/// *OnTags returns OnTags:
	//	{OnTags}
	//	(inverse?='inverse')?
	//	(only?='only')?
	//	'OnTags'
	//	'{'
	//		('tags' '{' tags+=EString ( "," tags+=EString)* '}' )?
	//		('treshold' treshold=EInt)?
	//		('quantificator' quantificator=Quantificators)?
	//	'}'; * / OnTime:
	//	timeOf=TimeType "before" operator=Operator treshold=EInt unit=TimeUnit;
	public OnTimeElements getOnTimeAccess() {
		return (pOnTime != null) ? pOnTime : (pOnTime = new OnTimeElements());
	}
	
	public ParserRule getOnTimeRule() {
		return getOnTimeAccess().getRule();
	}

	//OnSize:
	//	"size of file" inverse?="not"? operator=Operator treshold=EInt unit=MemoryUnit;
	public OnSizeElements getOnSizeAccess() {
		return (pOnSize != null) ? pOnSize : (pOnSize = new OnSizeElements());
	}
	
	public ParserRule getOnSizeRule() {
		return getOnSizeAccess().getRule();
	}

	//OnName:
	//	{OnName} "name is" inverse?="not"? name=EString;
	public OnNameElements getOnNameAccess() {
		return (pOnName != null) ? pOnName : (pOnName = new OnNameElements());
	}
	
	public ParserRule getOnNameRule() {
		return getOnNameAccess().getRule();
	}

	//OnExtension:
	//	{OnExtension} "extension is" inverse?="not"? "in [" (extensions+=EString ("," extensions+=EString)*)? "]";
	public OnExtensionElements getOnExtensionAccess() {
		return (pOnExtension != null) ? pOnExtension : (pOnExtension = new OnExtensionElements());
	}
	
	public ParserRule getOnExtensionRule() {
		return getOnExtensionAccess().getRule();
	}

	//IsEmpty:
	//	{IsEmpty} "is" inverse?="not"? "empty";
	public IsEmptyElements getIsEmptyAccess() {
		return (pIsEmpty != null) ? pIsEmpty : (pIsEmpty = new IsEmptyElements());
	}
	
	public ParserRule getIsEmptyRule() {
		return getIsEmptyAccess().getRule();
	}

	//OnType:
	//	"file" "is" inverse?="not"? type=FileType;
	public OnTypeElements getOnTypeAccess() {
		return (pOnType != null) ? pOnType : (pOnType = new OnTypeElements());
	}
	
	public ParserRule getOnTypeRule() {
		return getOnTypeAccess().getRule();
	}

	//enum Strategies:
	//	forced | append | carefully;
	public StrategiesElements getStrategiesAccess() {
		return (unknownRuleStrategies != null) ? unknownRuleStrategies : (unknownRuleStrategies = new StrategiesElements());
	}
	
	public EnumRule getStrategiesRule() {
		return getStrategiesAccess().getRule();
	}

	//enum Operator:
	//	equal="==" | less="<" | more=">" | less_equal="<=" | more_equal=">=";
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//enum TimeUnit:
	//	mins | hours | days | weeks | months | years;
	public TimeUnitElements getTimeUnitAccess() {
		return (unknownRuleTimeUnit != null) ? unknownRuleTimeUnit : (unknownRuleTimeUnit = new TimeUnitElements());
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//enum TimeType:
	//	modified | created;
	public TimeTypeElements getTimeTypeAccess() {
		return (unknownRuleTimeType != null) ? unknownRuleTimeType : (unknownRuleTimeType = new TimeTypeElements());
	}
	
	public EnumRule getTimeTypeRule() {
		return getTimeTypeAccess().getRule();
	}

	//enum Quantificators:
	//	any="any are" | all="all are";
	public QuantificatorsElements getQuantificatorsAccess() {
		return (unknownRuleQuantificators != null) ? unknownRuleQuantificators : (unknownRuleQuantificators = new QuantificatorsElements());
	}
	
	public EnumRule getQuantificatorsRule() {
		return getQuantificatorsAccess().getRule();
	}

	//enum MemoryUnit:
	//	KB | MB | GB | TB;
	public MemoryUnitElements getMemoryUnitAccess() {
		return (unknownRuleMemoryUnit != null) ? unknownRuleMemoryUnit : (unknownRuleMemoryUnit = new MemoryUnitElements());
	}
	
	public EnumRule getMemoryUnitRule() {
		return getMemoryUnitAccess().getRule();
	}

	//enum FileType:
	//	Document | Directory;
	public FileTypeElements getFileTypeAccess() {
		return (unknownRuleFileType != null) ? unknownRuleFileType : (unknownRuleFileType = new FileTypeElements());
	}
	
	public EnumRule getFileTypeRule() {
		return getFileTypeAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
