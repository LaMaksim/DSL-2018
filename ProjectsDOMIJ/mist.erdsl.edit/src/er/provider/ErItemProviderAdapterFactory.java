/**
 */
package er.provider;

import er.util.ErAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ErItemProviderAdapterFactory extends ErAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public ErItemProviderAdapterFactory()
  {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.Entity} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected EntityItemProvider entityItemProvider;

  /**
	 * This creates an adapter for a {@link er.Entity}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createEntityAdapter()
  {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.Attribute} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected AttributeItemProvider attributeItemProvider;

  /**
	 * This creates an adapter for a {@link er.Attribute}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createAttributeAdapter()
  {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.Domain} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected DomainItemProvider domainItemProvider;

  /**
	 * This creates an adapter for a {@link er.Domain}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createDomainAdapter()
  {
		if (domainItemProvider == null) {
			domainItemProvider = new DomainItemProvider(this);
		}

		return domainItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.Relationship} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected RelationshipItemProvider relationshipItemProvider;

  /**
	 * This creates an adapter for a {@link er.Relationship}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createRelationshipAdapter()
  {
		if (relationshipItemProvider == null) {
			relationshipItemProvider = new RelationshipItemProvider(this);
		}

		return relationshipItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.ISA} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ISAItemProvider isaItemProvider;

  /**
	 * This creates an adapter for a {@link er.ISA}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createISAAdapter()
  {
		if (isaItemProvider == null) {
			isaItemProvider = new ISAItemProvider(this);
		}

		return isaItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.Categorisation} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected CategorisationItemProvider categorisationItemProvider;

  /**
	 * This creates an adapter for a {@link er.Categorisation}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createCategorisationAdapter()
  {
		if (categorisationItemProvider == null) {
			categorisationItemProvider = new CategorisationItemProvider(this);
		}

		return categorisationItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.IdentificationDependency} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected IdentificationDependencyItemProvider identificationDependencyItemProvider;

  /**
	 * This creates an adapter for a {@link er.IdentificationDependency}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createIdentificationDependencyAdapter()
  {
		if (identificationDependencyItemProvider == null) {
			identificationDependencyItemProvider = new IdentificationDependencyItemProvider(this);
		}

		return identificationDependencyItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.RegularEntity} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected RegularEntityItemProvider regularEntityItemProvider;

  /**
	 * This creates an adapter for a {@link er.RegularEntity}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createRegularEntityAdapter()
  {
		if (regularEntityItemProvider == null) {
			regularEntityItemProvider = new RegularEntityItemProvider(this);
		}

		return regularEntityItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.Categories} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected CategoriesItemProvider categoriesItemProvider;

  /**
	 * This creates an adapter for a {@link er.Categories}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createCategoriesAdapter()
  {
		if (categoriesItemProvider == null) {
			categoriesItemProvider = new CategoriesItemProvider(this);
		}

		return categoriesItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.ERModel} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ERModelItemProvider erModelItemProvider;

  /**
	 * This creates an adapter for a {@link er.ERModel}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createERModelAdapter()
  {
		if (erModelItemProvider == null) {
			erModelItemProvider = new ERModelItemProvider(this);
		}

		return erModelItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.Key} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected KeyItemProvider keyItemProvider;

  /**
	 * This creates an adapter for a {@link er.Key}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createKeyAdapter()
  {
		if (keyItemProvider == null) {
			keyItemProvider = new KeyItemProvider(this);
		}

		return keyItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.Gerund} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected GerundItemProvider gerundItemProvider;

  /**
	 * This creates an adapter for a {@link er.Gerund}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createGerundAdapter()
  {
		if (gerundItemProvider == null) {
			gerundItemProvider = new GerundItemProvider(this);
		}

		return gerundItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link er.AttributeDomain} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected AttributeDomainItemProvider attributeDomainItemProvider;

  /**
	 * This creates an adapter for a {@link er.AttributeDomain}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createAttributeDomainAdapter()
  {
		if (attributeDomainItemProvider == null) {
			attributeDomainItemProvider = new AttributeDomainItemProvider(this);
		}

		return attributeDomainItemProvider;
	}

  /**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

  /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
		this.parentAdapterFactory = parentAdapterFactory;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean isFactoryForType(Object type)
  {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

  /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
		return super.adapt(notifier, this);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object adapt(Object object, Object type)
  {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

  /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
		changeNotifier.addListener(notifyChangedListener);
	}

  /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
		changeNotifier.removeListener(notifyChangedListener);
	}

  /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void fireNotifyChanged(Notification notification)
  {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

  /**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void dispose()
  {
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (domainItemProvider != null) domainItemProvider.dispose();
		if (relationshipItemProvider != null) relationshipItemProvider.dispose();
		if (isaItemProvider != null) isaItemProvider.dispose();
		if (categorisationItemProvider != null) categorisationItemProvider.dispose();
		if (identificationDependencyItemProvider != null) identificationDependencyItemProvider.dispose();
		if (regularEntityItemProvider != null) regularEntityItemProvider.dispose();
		if (categoriesItemProvider != null) categoriesItemProvider.dispose();
		if (erModelItemProvider != null) erModelItemProvider.dispose();
		if (keyItemProvider != null) keyItemProvider.dispose();
		if (gerundItemProvider != null) gerundItemProvider.dispose();
		if (attributeDomainItemProvider != null) attributeDomainItemProvider.dispose();
	}

}
