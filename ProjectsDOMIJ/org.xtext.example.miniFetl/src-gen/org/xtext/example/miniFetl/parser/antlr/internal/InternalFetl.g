/*
* generated by Xtext
*/
grammar InternalFetl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.miniFetl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.miniFetl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.miniFetl.services.FetlGrammarAccess;

}

@parser::members {

 	private FetlGrammarAccess grammarAccess;
 	
    public InternalFetlParser(TokenStream input, FetlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected FetlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getExecutionsExecutionParserRuleCall_1_0()); 
	    }
		lv_executions_1_0=ruleExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"executions",
        		lv_executions_1_0, 
        		"Execution");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getSemicolonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getExecutionsExecutionParserRuleCall_2_1_0()); 
	    }
		lv_executions_3_0=ruleExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"executions",
        		lv_executions_3_0, 
        		"Execution");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExecution
entryRuleExecution returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExecutionRule()); }
	 iv_ruleExecution=ruleExecution 
	 { $current=$iv_ruleExecution.current; } 
	 EOF 
;

// Rule Execution
ruleExecution returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExecutionAccess().getCopyParserRuleCall_0()); 
    }
    this_Copy_0=ruleCopy
    { 
        $current = $this_Copy_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExecutionAccess().getMoveParserRuleCall_1()); 
    }
    this_Move_1=ruleMove
    { 
        $current = $this_Move_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExecutionAccess().getDeleteParserRuleCall_2()); 
    }
    this_Delete_2=ruleDelete
    { 
        $current = $this_Delete_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExecutionAccess().getPathVariableParserRuleCall_3()); 
    }
    this_PathVariable_3=rulePathVariable
    { 
        $current = $this_PathVariable_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExecutionAccess().getSelectionVariableParserRuleCall_4()); 
    }
    this_SelectionVariable_4=ruleSelectionVariable
    { 
        $current = $this_SelectionVariable_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGenericStep
entryRuleGenericStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenericStepRule()); }
	 iv_ruleGenericStep=ruleGenericStep 
	 { $current=$iv_ruleGenericStep.current; } 
	 EOF 
;

// Rule GenericStep
ruleGenericStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGenericStepAccess().getConcreteStepParserRuleCall_0()); 
    }
    this_ConcreteStep_0=ruleConcreteStep
    { 
        $current = $this_ConcreteStep_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGenericStepAccess().getVariableStepParserRuleCall_1()); 
    }
    this_VariableStep_1=ruleVariableStep
    { 
        $current = $this_VariableStep_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGenericStepAccess().getParametrizedStepParserRuleCall_2()); 
    }
    this_ParametrizedStep_2=ruleParametrizedStep
    { 
        $current = $this_ParametrizedStep_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFilterComponent
entryRuleFilterComponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilterComponentRule()); }
	 iv_ruleFilterComponent=ruleFilterComponent 
	 { $current=$iv_ruleFilterComponent.current; } 
	 EOF 
;

// Rule FilterComponent
ruleFilterComponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFilterComponentAccess().getOnNameParserRuleCall_0()); 
    }
    this_OnName_0=ruleOnName
    { 
        $current = $this_OnName_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFilterComponentAccess().getOnExtensionParserRuleCall_1()); 
    }
    this_OnExtension_1=ruleOnExtension
    { 
        $current = $this_OnExtension_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFilterComponentAccess().getOnTimeParserRuleCall_2()); 
    }
    this_OnTime_2=ruleOnTime
    { 
        $current = $this_OnTime_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFilterComponentAccess().getOnAttributesParserRuleCall_3()); 
    }
    this_OnAttributes_3=ruleOnAttributes
    { 
        $current = $this_OnAttributes_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFilterComponentAccess().getOnTagsParserRuleCall_4()); 
    }
    this_OnTags_4=ruleOnTags
    { 
        $current = $this_OnTags_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFilterComponentAccess().getOnSizeParserRuleCall_5()); 
    }
    this_OnSize_5=ruleOnSize
    { 
        $current = $this_OnSize_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFilterComponentAccess().getFilterContainerParserRuleCall_6()); 
    }
    this_FilterContainer_6=ruleFilterContainer
    { 
        $current = $this_FilterContainer_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFilterComponentAccess().getIsEmptyParserRuleCall_7()); 
    }
    this_IsEmpty_7=ruleIsEmpty
    { 
        $current = $this_IsEmpty_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFilterComponentAccess().getOnTypeParserRuleCall_8()); 
    }
    this_OnType_8=ruleOnType
    { 
        $current = $this_OnType_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCopy
entryRuleCopy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCopyRule()); }
	 iv_ruleCopy=ruleCopy 
	 { $current=$iv_ruleCopy.current; } 
	 EOF 
;

// Rule Copy
ruleCopy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='copy' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCopyAccess().getCopyKeyword_0());
    }
	otherlv_1='from' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCopyAccess().getFromKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCopyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCopyAccess().getSourceSelectionVariableCrossReference_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='to' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCopyAccess().getToKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCopyAccess().getDestinationPathParserRuleCall_4_0()); 
	    }
		lv_destination_4_0=rulePath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCopyRule());
	        }
       		set(
       			$current, 
       			"destination",
        		lv_destination_4_0, 
        		"Path");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='strategy:' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCopyAccess().getStrategyKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCopyAccess().getStrategyStrategiesEnumRuleCall_5_1_0()); 
	    }
		lv_strategy_6_0=ruleStrategies		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCopyRule());
	        }
       		set(
       			$current, 
       			"strategy",
        		lv_strategy_6_0, 
        		"Strategies");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	 iv_ruleMove=ruleMove 
	 { $current=$iv_ruleMove.current; } 
	 EOF 
;

// Rule Move
ruleMove returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='move' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMoveAccess().getMoveKeyword_0());
    }
	otherlv_1='from' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMoveAccess().getFromKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMoveRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMoveAccess().getSourceSelectionVariableCrossReference_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='to' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMoveAccess().getToKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMoveAccess().getDestinationPathParserRuleCall_4_0()); 
	    }
		lv_destination_4_0=rulePath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMoveRule());
	        }
       		set(
       			$current, 
       			"destination",
        		lv_destination_4_0, 
        		"Path");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='strategy:' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMoveAccess().getStrategyKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMoveAccess().getStrategyStrategiesEnumRuleCall_5_1_0()); 
	    }
		lv_strategy_6_0=ruleStrategies		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMoveRule());
	        }
       		set(
       			$current, 
       			"strategy",
        		lv_strategy_6_0, 
        		"Strategies");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDelete
entryRuleDelete returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeleteRule()); }
	 iv_ruleDelete=ruleDelete 
	 { $current=$iv_ruleDelete.current; } 
	 EOF 
;

// Rule Delete
ruleDelete returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='delete' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeleteAccess().getDeleteKeyword_0());
    }
	otherlv_1='from' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeleteAccess().getFromKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeleteRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDeleteAccess().getSourceSelectionVariableCrossReference_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePathVariable
entryRulePathVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathVariableRule()); }
	 iv_rulePathVariable=rulePathVariable 
	 { $current=$iv_rulePathVariable.current; } 
	 EOF 
;

// Rule PathVariable
rulePathVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPathVariableAccess().getNameEStringParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathVariableRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPathVariableAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathVariableAccess().getValuePathParserRuleCall_2_0()); 
	    }
		lv_value_2_0=rulePath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathVariableRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Path");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSelectionVariable
entryRuleSelectionVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectionVariableRule()); }
	 iv_ruleSelectionVariable=ruleSelectionVariable 
	 { $current=$iv_ruleSelectionVariable.current; } 
	 EOF 
;

// Rule SelectionVariable
ruleSelectionVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='view' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectionVariableAccess().getViewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionVariableAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionVariableRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectionVariableAccess().getAsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionVariableAccess().getValueSelectionParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleSelection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionVariableRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Selection");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePath
entryRulePath returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathRule()); }
	 iv_rulePath=rulePath 
	 { $current=$iv_rulePath.current; } 
	 EOF 
;

// Rule Path
rulePath returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='[absolute:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPathAccess().getAbsoluteKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathAccess().getAbsoluteEBooleanParserRuleCall_0_1_0()); 
	    }
		lv_absolute_1_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathRule());
	        }
       		set(
       			$current, 
       			"absolute",
        		lv_absolute_1_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPathAccess().getRightSquareBracketKeyword_0_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPathAccess().getStepsGenericStepParserRuleCall_1_0()); 
	    }
		lv_steps_3_0=ruleGenericStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_3_0, 
        		"GenericStep");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='+' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPathAccess().getPlusSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathAccess().getStepsGenericStepParserRuleCall_2_1_0()); 
	    }
		lv_steps_5_0=ruleGenericStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_5_0, 
        		"GenericStep");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); } 
	 iv_ruleEBoolean=ruleEBoolean 
	 { $current=$iv_ruleEBoolean.current.getText(); }  
	 EOF 
;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleConcreteStep
entryRuleConcreteStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConcreteStepRule()); }
	 iv_ruleConcreteStep=ruleConcreteStep 
	 { $current=$iv_ruleConcreteStep.current; } 
	 EOF 
;

// Rule ConcreteStep
ruleConcreteStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getConcreteStepAccess().getValueEStringParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcreteStepRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleVariableStep
entryRuleVariableStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableStepRule()); }
	 iv_ruleVariableStep=ruleVariableStep 
	 { $current=$iv_ruleVariableStep.current; } 
	 EOF 
;

// Rule VariableStep
ruleVariableStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='path' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableStepAccess().getPathKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableStepRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVariableStepAccess().getValuePathVariableCrossReference_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParametrizedStep
entryRuleParametrizedStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParametrizedStepRule()); }
	 iv_ruleParametrizedStep=ruleParametrizedStep 
	 { $current=$iv_ruleParametrizedStep.current; } 
	 EOF 
;

// Rule ParametrizedStep
ruleParametrizedStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParametrizedStepAccess().getParametrizedStepAction_0(),
            $current);
    }
)	otherlv_1='{$' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParametrizedStepAccess().getLeftCurlyBracketDollarSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParametrizedStepAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParametrizedStepRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParametrizedStepAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleSelection
entryRuleSelection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectionRule()); }
	 iv_ruleSelection=ruleSelection 
	 { $current=$iv_ruleSelection.current; } 
	 EOF 
;

// Rule Selection
ruleSelection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='select' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectionAccess().getSelectKeyword_0());
    }
	otherlv_1='from' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectionAccess().getFromKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getFromPathParserRuleCall_2_0()); 
	    }
		lv_from_2_0=rulePath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_2_0, 
        		"Path");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='where' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelectionAccess().getWhereKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getWhereFilterComponentParserRuleCall_3_1_0()); 
	    }
		lv_where_4_0=ruleFilterComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		add(
       			$current, 
       			"where",
        		lv_where_4_0, 
        		"FilterComponent");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSelectionAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getWhereFilterComponentParserRuleCall_3_2_1_0()); 
	    }
		lv_where_6_0=ruleFilterComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		add(
       			$current, 
       			"where",
        		lv_where_6_0, 
        		"FilterComponent");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleOnName
entryRuleOnName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnNameRule()); }
	 iv_ruleOnName=ruleOnName 
	 { $current=$iv_ruleOnName.current; } 
	 EOF 
;

// Rule OnName
ruleOnName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOnNameAccess().getOnNameAction_0(),
            $current);
    }
)	otherlv_1='name' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOnNameAccess().getNameKeyword_1());
    }
	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOnNameAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnNameAccess().getNameEStringParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='keep' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOnNameAccess().getKeepKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnNameAccess().getTrueFalseSearchEBooleanParserRuleCall_4_1_0()); 
	    }
		lv_trueFalseSearch_5_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnNameRule());
	        }
       		set(
       			$current, 
       			"trueFalseSearch",
        		lv_trueFalseSearch_5_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOnExtension
entryRuleOnExtension returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnExtensionRule()); }
	 iv_ruleOnExtension=ruleOnExtension 
	 { $current=$iv_ruleOnExtension.current; } 
	 EOF 
;

// Rule OnExtension
ruleOnExtension returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOnExtensionAccess().getOnExtensionAction_0(),
            $current);
    }
)	otherlv_1='extension' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOnExtensionAccess().getExtensionKeyword_1());
    }
	otherlv_2='in [' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOnExtensionAccess().getInKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOnExtensionAccess().getExtensionsEStringParserRuleCall_3_0_0()); 
	    }
		lv_extensions_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnExtensionRule());
	        }
       		add(
       			$current, 
       			"extensions",
        		lv_extensions_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOnExtensionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnExtensionAccess().getExtensionsEStringParserRuleCall_3_1_1_0()); 
	    }
		lv_extensions_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnExtensionRule());
	        }
       		add(
       			$current, 
       			"extensions",
        		lv_extensions_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOnExtensionAccess().getRightSquareBracketKeyword_4());
    }
(	otherlv_7='keep' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOnExtensionAccess().getKeepKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnExtensionAccess().getTrueFalseSearchEBooleanParserRuleCall_5_1_0()); 
	    }
		lv_trueFalseSearch_8_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnExtensionRule());
	        }
       		set(
       			$current, 
       			"trueFalseSearch",
        		lv_trueFalseSearch_8_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOnTime
entryRuleOnTime returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnTimeRule()); }
	 iv_ruleOnTime=ruleOnTime 
	 { $current=$iv_ruleOnTime.current; } 
	 EOF 
;

// Rule OnTime
ruleOnTime returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='time' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOnTimeAccess().getTimeKeyword_0());
    }
	otherlv_1='of' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOnTimeAccess().getOfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnTimeAccess().getTimeOfTimeTypeEnumRuleCall_2_0()); 
	    }
		lv_timeOf_2_0=ruleTimeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnTimeRule());
	        }
       		set(
       			$current, 
       			"timeOf",
        		lv_timeOf_2_0, 
        		"TimeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOnTimeAccess().getOperatorOperatorEnumRuleCall_3_0()); 
	    }
		lv_operator_3_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnTimeRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOnTimeAccess().getTresholdEIntParserRuleCall_4_0()); 
	    }
		lv_treshold_4_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnTimeRule());
	        }
       		set(
       			$current, 
       			"treshold",
        		lv_treshold_4_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOnTimeAccess().getUnitTimeUnitEnumRuleCall_5_0()); 
	    }
		lv_unit_5_0=ruleTimeUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnTimeRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_5_0, 
        		"TimeUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='keep' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOnTimeAccess().getKeepKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnTimeAccess().getTrueFalseSearchEBooleanParserRuleCall_6_1_0()); 
	    }
		lv_trueFalseSearch_7_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnTimeRule());
	        }
       		set(
       			$current, 
       			"trueFalseSearch",
        		lv_trueFalseSearch_7_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOnAttributes
entryRuleOnAttributes returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnAttributesRule()); }
	 iv_ruleOnAttributes=ruleOnAttributes 
	 { $current=$iv_ruleOnAttributes.current; } 
	 EOF 
;

// Rule OnAttributes
ruleOnAttributes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='attribute' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOnAttributesAccess().getAttributeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnAttributesAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnAttributesRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='is' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOnAttributesAccess().getIsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnAttributesAccess().getValueEStringParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnAttributesRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='keep' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOnAttributesAccess().getKeepKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnAttributesAccess().getTrueFalseSearchEBooleanParserRuleCall_3_1_0()); 
	    }
		lv_trueFalseSearch_5_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnAttributesRule());
	        }
       		set(
       			$current, 
       			"trueFalseSearch",
        		lv_trueFalseSearch_5_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOnTags
entryRuleOnTags returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnTagsRule()); }
	 iv_ruleOnTags=ruleOnTags 
	 { $current=$iv_ruleOnTags.current; } 
	 EOF 
;

// Rule OnTags
ruleOnTags returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOnTagsAccess().getLeftSquareBracketKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOnTagsAccess().getTagsEStringParserRuleCall_1_0_0()); 
	    }
		lv_tags_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnTagsRule());
	        }
       		add(
       			$current, 
       			"tags",
        		lv_tags_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOnTagsAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnTagsAccess().getTagsEStringParserRuleCall_1_1_1_0()); 
	    }
		lv_tags_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnTagsRule());
	        }
       		add(
       			$current, 
       			"tags",
        		lv_tags_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOnTagsAccess().getRightSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnTagsAccess().getTresholdEIntParserRuleCall_3_0()); 
	    }
		lv_treshold_5_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnTagsRule());
	        }
       		set(
       			$current, 
       			"treshold",
        		lv_treshold_5_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='in tags' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOnTagsAccess().getInTagsKeyword_4());
    }
(
(
		lv_only_7_0=	'exclusively' 
    {
        newLeafNode(lv_only_7_0, grammarAccess.getOnTagsAccess().getOnlyExclusivelyKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOnTagsRule());
	        }
       		setWithLastConsumed($current, "only", true, "exclusively");
	    }

)
)?(	otherlv_8='keep' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getOnTagsAccess().getKeepKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnTagsAccess().getTrueFalseSearchEBooleanParserRuleCall_6_1_0()); 
	    }
		lv_trueFalseSearch_9_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnTagsRule());
	        }
       		set(
       			$current, 
       			"trueFalseSearch",
        		lv_trueFalseSearch_9_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOnSize
entryRuleOnSize returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnSizeRule()); }
	 iv_ruleOnSize=ruleOnSize 
	 { $current=$iv_ruleOnSize.current; } 
	 EOF 
;

// Rule OnSize
ruleOnSize returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='size' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOnSizeAccess().getSizeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnSizeAccess().getOperatorOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnSizeRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOnSizeAccess().getTresholdEIntParserRuleCall_2_0()); 
	    }
		lv_treshold_2_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnSizeRule());
	        }
       		set(
       			$current, 
       			"treshold",
        		lv_treshold_2_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOnSizeAccess().getUnitMemoryUnitEnumRuleCall_3_0()); 
	    }
		lv_unit_3_0=ruleMemoryUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnSizeRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_3_0, 
        		"MemoryUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='keep' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOnSizeAccess().getKeepKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnSizeAccess().getTrueFalseSearchEBooleanParserRuleCall_4_1_0()); 
	    }
		lv_trueFalseSearch_5_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnSizeRule());
	        }
       		set(
       			$current, 
       			"trueFalseSearch",
        		lv_trueFalseSearch_5_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFilterContainer
entryRuleFilterContainer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilterContainerRule()); }
	 iv_ruleFilterContainer=ruleFilterContainer 
	 { $current=$iv_ruleFilterContainer.current; } 
	 EOF 
;

// Rule FilterContainer
ruleFilterContainer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFilterContainerAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterContainerAccess().getCompositionTypeCompositionTypeEnumRuleCall_1_0()); 
	    }
		lv_compositionType_1_0=ruleCompositionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterContainerRule());
	        }
       		set(
       			$current, 
       			"compositionType",
        		lv_compositionType_1_0, 
        		"CompositionType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFilterContainerAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterContainerAccess().getSegmentsFilterComponentParserRuleCall_3_0()); 
	    }
		lv_segments_3_0=ruleFilterComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterContainerRule());
	        }
       		add(
       			$current, 
       			"segments",
        		lv_segments_3_0, 
        		"FilterComponent");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFilterContainerAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterContainerAccess().getSegmentsFilterComponentParserRuleCall_4_1_0()); 
	    }
		lv_segments_5_0=ruleFilterComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterContainerRule());
	        }
       		add(
       			$current, 
       			"segments",
        		lv_segments_5_0, 
        		"FilterComponent");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFilterContainerAccess().getRightParenthesisKeyword_5());
    }
	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFilterContainerAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleIsEmpty
entryRuleIsEmpty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsEmptyRule()); }
	 iv_ruleIsEmpty=ruleIsEmpty 
	 { $current=$iv_ruleIsEmpty.current; } 
	 EOF 
;

// Rule IsEmpty
ruleIsEmpty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIsEmptyAccess().getIsEmptyAction_0(),
            $current);
    }
)	otherlv_1='empty' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIsEmptyAccess().getEmptyKeyword_1());
    }
	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIsEmptyAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIsEmptyAccess().getTrueFalseSearchEBooleanParserRuleCall_3_0()); 
	    }
		lv_trueFalseSearch_3_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIsEmptyRule());
	        }
       		set(
       			$current, 
       			"trueFalseSearch",
        		lv_trueFalseSearch_3_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleOnType
entryRuleOnType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnTypeRule()); }
	 iv_ruleOnType=ruleOnType 
	 { $current=$iv_ruleOnType.current; } 
	 EOF 
;

// Rule OnType
ruleOnType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='file' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOnTypeAccess().getFileKeyword_0());
    }
	otherlv_1='is' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOnTypeAccess().getIsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnTypeAccess().getTypeFileTypeEnumRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleFileType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"FileType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='keep' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOnTypeAccess().getKeepKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnTypeAccess().getTrueFalseSearchEBooleanParserRuleCall_3_1_0()); 
	    }
		lv_trueFalseSearch_4_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnTypeRule());
	        }
       		set(
       			$current, 
       			"trueFalseSearch",
        		lv_trueFalseSearch_4_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule Strategies
ruleStrategies returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='forced' 
	{
        $current = grammarAccess.getStrategiesAccess().getForcedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getStrategiesAccess().getForcedEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='append' 
	{
        $current = grammarAccess.getStrategiesAccess().getAppendEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getStrategiesAccess().getAppendEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='carefully' 
	{
        $current = grammarAccess.getStrategiesAccess().getCarefullyEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getStrategiesAccess().getCarefullyEnumLiteralDeclaration_2()); 
    }
));



// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<' 
	{
        $current = grammarAccess.getOperatorAccess().getLessEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getLessEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>' 
	{
        $current = grammarAccess.getOperatorAccess().getMoreEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getMoreEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<=' 
	{
        $current = grammarAccess.getOperatorAccess().getLess_equalEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOperatorAccess().getLess_equalEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getOperatorAccess().getMore_equalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOperatorAccess().getMore_equalEnumLiteralDeclaration_4()); 
    }
));



// Rule TimeUnit
ruleTimeUnit returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='min' 
	{
        $current = grammarAccess.getTimeUnitAccess().getMinEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTimeUnitAccess().getMinEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='hour' 
	{
        $current = grammarAccess.getTimeUnitAccess().getHourEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTimeUnitAccess().getHourEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='day' 
	{
        $current = grammarAccess.getTimeUnitAccess().getDayEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTimeUnitAccess().getDayEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='week' 
	{
        $current = grammarAccess.getTimeUnitAccess().getWeekEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTimeUnitAccess().getWeekEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='month' 
	{
        $current = grammarAccess.getTimeUnitAccess().getMonthEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getTimeUnitAccess().getMonthEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='year' 
	{
        $current = grammarAccess.getTimeUnitAccess().getYearEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getTimeUnitAccess().getYearEnumLiteralDeclaration_5()); 
    }
));



// Rule TimeType
ruleTimeType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='modification' 
	{
        $current = grammarAccess.getTimeTypeAccess().getModificationEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTimeTypeAccess().getModificationEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='cretion' 
	{
        $current = grammarAccess.getTimeTypeAccess().getCretionEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTimeTypeAccess().getCretionEnumLiteralDeclaration_1()); 
    }
));



// Rule MemoryUnit
ruleMemoryUnit returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='KB' 
	{
        $current = grammarAccess.getMemoryUnitAccess().getKBEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMemoryUnitAccess().getKBEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='MB' 
	{
        $current = grammarAccess.getMemoryUnitAccess().getMBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMemoryUnitAccess().getMBEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='GB' 
	{
        $current = grammarAccess.getMemoryUnitAccess().getGBEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMemoryUnitAccess().getGBEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='TB' 
	{
        $current = grammarAccess.getMemoryUnitAccess().getTBEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getMemoryUnitAccess().getTBEnumLiteralDeclaration_3()); 
    }
));



// Rule CompositionType
ruleCompositionType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='all of' 
	{
        $current = grammarAccess.getCompositionTypeAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompositionTypeAccess().getAndEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='any of' 
	{
        $current = grammarAccess.getCompositionTypeAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompositionTypeAccess().getOrEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='none' 
	{
        $current = grammarAccess.getCompositionTypeAccess().getNoneEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompositionTypeAccess().getNoneEnumLiteralDeclaration_2()); 
    }
));



// Rule FileType
ruleFileType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Document' 
	{
        $current = grammarAccess.getFileTypeAccess().getDocumentEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFileTypeAccess().getDocumentEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Folder' 
	{
        $current = grammarAccess.getFileTypeAccess().getFolderEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFileTypeAccess().getFolderEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


