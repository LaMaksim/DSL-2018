// automatically generated by Xtext
grammar org.xtext.example.miniFetl.Fetl with org.eclipse.xtext.common.Terminals

import "https://lamaksim.com" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	executions+=Execution ( ";" executions+=Execution)*
	;

Execution returns Execution:
	Copy | Move | Delete | PathVariable | SelectionVariable
	;




GenericStep returns GenericStep:
	ConcreteStep | VariableStep | ParametrizedStep;


FilterComponent returns FilterComponent:
	OnName | OnExtension | OnTime | OnAttributes | OnTags | OnSize | FilterContainer | IsEmpty | OnType;

Copy returns Copy:
	'copy'
		'from' source=[SelectionVariable|EString]
		'to' destination=Path
		('strategy:' strategy=Strategies)?
	;

Move returns Move:
	'move'
		'from' source=[SelectionVariable|EString]
		'to' destination=Path
		('strategy:' strategy=Strategies)?
	;

Delete returns Delete:
	'delete'
		'from' source=[SelectionVariable|EString]
	;

PathVariable returns PathVariable:
	name=EString
	'=' value=Path
	;

SelectionVariable returns SelectionVariable:
	'view'
	name=EString
	'as' value=Selection
	;

Path returns Path:
	
		('[absolute:' absolute=EBoolean ']')?
		steps+=GenericStep ( "+" steps+=GenericStep)* 
	;

enum Strategies returns Strategies:
				forced = 'forced' | append = 'append' | carefully = 'carefully';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

ConcreteStep returns ConcreteStep:
		value=EString
	;

VariableStep returns VariableStep:
	'path' value=[PathVariable|EString]
	;

ParametrizedStep returns ParametrizedStep:
	{ParametrizedStep}
	'{$'
	name=EString
	'}';

EString returns ecore::EString:
	STRING | ID;

Selection returns Selection:
	'select'
		'from' from=Path
		('where' where+=FilterComponent ( "," where+=FilterComponent)* )?	
	;

OnName returns OnName:
	{OnName}
	'name' '=' name=EString
	('keep' trueFalseSearch=EBoolean)?
	;

OnExtension returns OnExtension:
	{OnExtension}
	'extension' 
	'in [' (extensions+=EString ( "," extensions+=EString)* )? ']'
	('keep' trueFalseSearch=EBoolean)?	
	;

OnTime returns OnTime:
	'time' 
	'of' timeOf=TimeType
	operator=Operator
	treshold=EInt
	unit=TimeUnit
	('keep' trueFalseSearch=EBoolean)?
		
		
			
	;

OnAttributes returns OnAttributes:
	'attribute'
	name=EString
	('is' value=EString)?
	('keep' trueFalseSearch=EBoolean)?	
	;

OnTags returns OnTags:
	'[' (tags+=EString ( "," tags+=EString)*)? ']'
	treshold=EInt 'in tags' 
	(only?='exclusively')?
	('keep' trueFalseSearch=EBoolean)?	
	;

OnSize returns OnSize:
	'size'
	operator=Operator
	treshold=EInt
	unit=MemoryUnit
	('keep' trueFalseSearch=EBoolean)?
	;

FilterContainer returns FilterContainer:
	'{'
		compositionType=CompositionType
		'(' segments+=FilterComponent ( "," segments+=FilterComponent)* ')' 
	'}';

IsEmpty returns IsEmpty:
	{IsEmpty}
	'empty' 
	'=' 
	(trueFalseSearch=EBoolean)?;

OnType returns OnType:
	'file'
	'is' type=FileType
	('keep' trueFalseSearch=EBoolean)?	
	;

enum Operator returns Operator:
				equal = '==' | less = '<' | more = '>' | less_equal = '<=' | more_equal = '>=';

EInt returns ecore::EInt:
	'-'? INT;

enum TimeUnit returns TimeUnit:
				min = 'min' | hour = 'hour' | day = 'day' | week = 'week' | month = 'month' | year = 'year';

enum TimeType returns TimeType:
				modification = 'modification' | cretion = 'cretion';

enum MemoryUnit returns MemoryUnit:
				KB = 'KB' | MB = 'MB' | GB = 'GB' | TB = 'TB';

enum CompositionType returns CompositionType:
				and = 'all of' | or = 'any of' | none = 'none';

enum FileType returns FileType:
				Document = 'Document' | Folder = 'Folder';
