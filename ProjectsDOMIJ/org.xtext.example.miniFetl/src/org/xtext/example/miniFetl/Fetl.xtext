// automatically generated by Xtext
grammar org.xtext.example.miniFetl.Fetl with org.eclipse.xtext.common.Terminals

import "https://lamaksim.com" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	'Model'
	'{'
		('executions' '{' executions+=Execution ( "," executions+=Execution)* '}' )?
	'}';

Execution returns Execution:
	Copy | Move | Delete | PathVariable | SelectionVariable;




GenericStep returns GenericStep:
	ConcreteStep | VariableStep | ParametrizedStep;


FilterComponent returns FilterComponent:
	OnName | OnExtension | OnTime | OnAttributes | OnTags | OnSize | FilterContainer | IsEmpty | OnType;

Copy returns Copy:
	'Copy'
	'{'
		('strategy' strategy=Strategies)?
		'source' source=[SelectionVariable|EString]
		'destination' destination=Path
	'}';

Move returns Move:
	'Move'
	'{'
		('strategy' strategy=Strategies)?
		'source' source=[SelectionVariable|EString]
		'destination' destination=Path
	'}';

Delete returns Delete:
	'Delete'
	'{'
		'source' source=[SelectionVariable|EString]
	'}';

PathVariable returns PathVariable:
	'PathVariable'
	name=EString
	'{'
		'value' value=Path
	'}';

SelectionVariable returns SelectionVariable:
	'SelectionVariable'
	name=EString
	'{'
		'value' value=Selection
	'}';

Path returns Path:
	'Path'
	'{'
		('absolute' absolute=EBoolean)?
		'steps' '{' steps+=GenericStep ( "," steps+=GenericStep)* '}' 
	'}';

enum Strategies returns Strategies:
				forced = 'forced' | append = 'append' | carefully = 'carefully';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

ConcreteStep returns ConcreteStep:
	'ConcreteStep'
	'{'
		'value' value=EString
	'}';

VariableStep returns VariableStep:
	'VariableStep'
	'{'
		'value' value=[PathVariable|EString]
	'}';

ParametrizedStep returns ParametrizedStep:
	{ParametrizedStep}
	'ParametrizedStep'
	name=EString;

EString returns ecore::EString:
	STRING | ID;

Selection returns Selection:
	'Selection'
	'{'
		('where' '{' where+=FilterComponent ( "," where+=FilterComponent)* '}' )?
		'from' from=Path
	'}';

OnName returns OnName:
	{OnName}
	'OnName'
	name=EString
	'{'
		('trueFalseSearch' trueFalseSearch=EBoolean)?
	'}';

OnExtension returns OnExtension:
	{OnExtension}
	'OnExtension'
	'{'
		('trueFalseSearch' trueFalseSearch=EBoolean)?
		('extensions' '{' extensions+=EString ( "," extensions+=EString)* '}' )?
	'}';

OnTime returns OnTime:
	'OnTime'
	'{'
		('trueFalseSearch' trueFalseSearch=EBoolean)?
		'operator' operator=Operator
		'treshold' treshold=EInt
		'unit' unit=TimeUnit
		'timeOf' timeOf=TimeType
	'}';

OnAttributes returns OnAttributes:
	'OnAttributes'
	name=EString
	'{'
		('trueFalseSearch' trueFalseSearch=EBoolean)?
		'value' value=EString
	'}';

OnTags returns OnTags:
	(only?='only')?
	'OnTags'
	'{'
		('trueFalseSearch' trueFalseSearch=EBoolean)?
		('tags' '{' tags+=EString ( "," tags+=EString)* '}' )?
		'treshold' treshold=EInt
	'}';

OnSize returns OnSize:
	'OnSize'
	'{'
		('trueFalseSearch' trueFalseSearch=EBoolean)?
		'operator' operator=Operator
		'treshold' treshold=EInt
		'unit' unit=MemoryUnit
	'}';

FilterContainer returns FilterContainer:
	'FilterContainer'
	'{'
		('compositionType' compositionType=CompositionType)?
		'segments' '{' segments+=FilterComponent ( "," segments+=FilterComponent)* '}' 
	'}';

IsEmpty returns IsEmpty:
	{IsEmpty}
	'IsEmpty'
	'{'
		('trueFalseSearch' trueFalseSearch=EBoolean)?
	'}';

OnType returns OnType:
	'OnType'
	'{'
		('trueFalseSearch' trueFalseSearch=EBoolean)?
		'type' type=FileType
	'}';

enum Operator returns Operator:
				equal = 'equal' | less = 'less' | more = 'more' | less_equal = 'less_equal' | more_equal = 'more_equal';

EInt returns ecore::EInt:
	'-'? INT;

enum TimeUnit returns TimeUnit:
				min = 'min' | hour = 'hour' | day = 'day' | week = 'week' | month = 'month' | year = 'year';

enum TimeType returns TimeType:
				modification = 'modification' | cretion = 'cretion';

enum MemoryUnit returns MemoryUnit:
				KB = 'KB' | MB = 'MB' | GB = 'GB' | TB = 'TB';

enum CompositionType returns CompositionType:
				and = 'and' | or = 'or' | none = 'none';

enum FileType returns FileType:
				Document = 'Document' | Folder = 'Folder';
